             So You Want to Fix the Tor Network: Episode One
                                  - or -
           How to Run a Bandwidth-Measuring Directory Authority


0. Run a Directory Authority

See http://git.torproject.org/checkout/tor/master/doc/v3-authority-howto.txt

You will want the authority to use the new bandwidth voting code for
your authority. You can get it with:

     git clone git://git.torproject.org/git/tor.git tor.git
     cd tor.git
     git remote add mikeperry git://git.torproject.org/~mikeperry/git/tor
     git fetch mikeperry
     git branch --track bandwidth-voting4 mikeperry/bandwidth-voting4
     git checkout bandwidth-voting4
     git rebase master


1. Find a machine with 10Mbit+ downstream

This can be the same as your directory authority, but if you are 
handy with rsync, it does not have to be. You will not need the 10Mbit
continuously, but it should be available on demand, as some of the
faster nodes actually do have this much slack capacity.

The machine will require around 4-5Gbytes/day.


2. Get a checkout of Tor with the new network status control fixes:

This checkout will need to be on the machine that does the scanning.

     git clone git://git.torproject.org/git/tor.git tor.git
     cd tor.git
     git remote add mikeperry git://git.torproject.org/~mikeperry/git/tor
     git fetch mikeperry
     git branch --track rs-format-fix7 mikeperry/rs-format-fix7
     git checkout rs-format-fix7
     git rebase master

Note that the rs-format-fix is a child branch of bandwidth-voting, so if
you only want to have one git codebase for both the scanner and the
authority, you can just checkout rs-format-fix7.



3. Compile Tor for your authority and your scanner

No special configure script options are needed.


4. Download SQLAlchemy 0.5.x-latest.

While TorFlow is written to be compatible with both 0.4.x and 0.5.x of
SQLAlchemy, 0.4.8 seems to exhibit odd object persistence bugs. If your
distribution does not provide 0.5.4 or newer, you will likely want to
download that tarball from:

http://pypi.python.org/pypi/SQLAlchemy/

Untar it in the same directory that contains the TorFlow checkout and
your git checkout (for peace of mind, you will want all three in the
same place).


5. Enable voting on bandwidths in your authority torrc

The new configuration option is V3BandwidthsFile. It specifies the 
file containing your measured results, which we will configure
in the later steps. Pick a location accessible by your Tor 
directory authority process and any rsync user you may have. 

I recommend /var/lib/tor.bwscans/bwscan. If you try to use
/var/lib/tor, tor will reset your permissions and exclude
any other users from writing the file there.


6. (Optional) Create a user capable of writing the bwscan file

This can either be the user that will run the scanning scripts, 
or the user that will receive the scp of the result from the remote
machine. It should have write access to your bwscan dir from
step 4.

# useradd bwscanner
# chown toruser:bwscanner /var/lib/tor.bwscans/
# chmod 770 /var/lib/tor.bwscans/


7. Spot-check ./run_scan.sh

This is the script that will launch the scanners. By default, it
launches four in parallel, and expects the git checkout of the
rs-format-fix branch to be in ../../../tor.git/, and the SQLAlchemy
extraction to be in ../../../SQLAlchemy-0.5.4p2. 

Again, note that this is the same directory that contains this
torflow checkout.


8. Set up a cron job to submit results

Ideally a cron job would aggregate the results and provide them to your
directory authority at least every four hours, but more often is better:

# echo "45 0-23/4 * * * $HOME/code/torflow-trunk/NetworkScanners/BwAuthority/cron.sh" | crontab

Note that authorities vote every hour starting at 50 past the hour.
Hence the 45 to give us time to gather the results and copy them over.

In general, if you have any other bandwidth-intensive backup or mirror
cron jobs on your scanning server, you should schedule them for between
1:30am and 4:30am, as this is when your scanner will be idle. If this is
not possible, you can configure your scanner to sleep during a different
time by editing the bwauthority.cfg files in ./data/scanner.*.

For more fine grained tuning, note that the scanner using ./data/scanner.1
will require the most bandwidth, and ./data/scanner.4 will require the 
least.


9. PROFIT!

That's all there is to it. No '????' step needed!



Appendix A: Creating the HTTPS scanning server

The scanner server will need approx 30-40Mbit of upstream available, and will
need to serve https via a fixed IP. SSL is needed to avoid HTTP content
caches at the various exit nodes. Self-signed certs are OK.

The server will consume around 12-15Gbytes/day.

Here are two shell script snippets to generate the files we will need 
for scanning and testing:

for i in 64 32 16 8 4 2 1; do
  dd if=/dev/urandom of=./${i}M bs=1k count=`expr $i \* 1024`
done

for i in 512 256 128 64 32 16; do
  dd if=/dev/urandom of=./${i}k bs=1k count=$i
done



