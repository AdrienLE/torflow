[HOST_PORT]

# Set the host and port where Tor is
# listening for control-connections
control_host = 127.0.0.1
control_port = 9051

[CIRC_MANAGEMENT]

# Size of the maintained pool of circuits
idle_circuits = 3

# TODO: Configure ports to use

[NODE_SELECTION]

# Number of hops to be used in paths and
# a minimum-value for advertised bandwidth
pathlen = 3
min_bw = 1024

# Percentiles
percent_fast = 100
percent_skip = 0
use_all_exits = yes

# UniformGenerator with optionally ordered exits,
# (uniform = no) --> bandwidth-weighted selection
uniform = no
order_exits = no

# Make use of guard-nodes (yes|no) or a specific 
# exit node (nickname or IDHex) for all paths
use_guards = yes
#use_exit = xyz

[GEOIP]

# Use GeoIP
# yes|no
use_geoip = yes

# yes|no for unique|distinct countries,
# ! comment to don't care
unique_countries = yes

# Maximum number of continent crossings: 0-n
# ! comment out to enforce distinct continents
# ! set >= pathlen to not care about
continent_crossings = 2
# Maximum number of ocean crossings: 0-n
# ! comment out to don't care
ocean_crossings = 1

# If echelon is set, OP-Addon will try to find an 
# exit in the destination country of the current 
# request (exit_country may be used as backup)
# yes|no
# TODO: echelon = yes

# Set country codes for single positions
#entry_country = DE
#middle_country = RU
#exit_country = US

# TODO: excludes = [".."]

[EVALUATE]

# Evaluation mode: close every circuit after measuring performance
# yes|no
evaluate = no

# Number of latency-tests per circuit (int: 0-n)
num_rtt_tests = 3
# Number of bandwidth-tests per circuit (int:0 or 1)
# Requires stream-server.pl listening on the same host
num_bw_tests = 0

# Amount of circuits to test (int)
num_records = 300

[RTT]

# Ping the latencies of complete circuits
# yes|no
ping_circs = yes

# Tor socks-properties
socks_host = 127.0.0.1
socks_port = 9050

# Host- and port-dummies to be used 
# for ping-connections
ping_dummy_host = 127.0.0.1
ping_dummy_port = 100

# Time interval to wait before triggering
# pings and frequency of pings in seconds (float)
initial_interval = 10
frequency = 5

# Close a circuit after n timeouts on measurings
# Set to 0 to never close circs (int)
timeout_limit = 1

[MODEL]

# Set to 'yes' to measure latencies of single links 
# and enable circuit creation from the model
# yes|no
network_model = no

# Min ratio of circs created with the backup-method,
# controls growing of the model (float in [0,1])
#   0:  no growing
#   1:  growing only
min_ratio = 0.5
# RTT-threshhold in seconds when creating circs (float):
#   0:  no threshhold, choose from all proposals
max_rtt = 0
# Minimum number of proposals to choose from (int)
min_proposals = 100
