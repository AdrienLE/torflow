General things I already did:

- Extended TorCtl.py to be able to specify the 'hop' when attaching streams
- Extended the Router class for country_code and continent and sat up a
  country-to-continent mapping for that
- Created a class GeoIPConfig for the configuration and extended the
  SelectionManager to add the necessary restrictions
- Implemented Node/PathRestrictions: CountryCode, UniqueCountry, SingleCountry,
  ExcludeCountries, ContinentCrossings, ContinentJumper, UniqueContinent
- Created a separate CircuitHandler that can maintain a pool of n circuits
  and the StreamHandler for attaching streams
- Implemented the BwWeightedGenerator

My controller (op-addon.py) is currently able to:

- Create and maintain a circuit-pool of configurable size using any path 
  selection method
- Either measure performance of circs created with any method, or handle user
  streams
- Optionally Ping the circuits in the pool with a configurable frequency
- Close circuits that are 'too slow' regarding a latency threshhold
- Attach user streams to a circuit currently having a low latency
- Optionally ping every circuit n (=hop-count) times using each single hop 
  as the exit node once
- Compute round-trip latencies for the single links between routers from the 
  results and store them in a graph model
- Choose the fastest suitable path or uniformly from the subset of at least x
  circuit-proposals found in the model having RTT <= y ms
- Choose paths from the model in a probabilistic way regarding a score
  that is calculated from measured latencies and advertised bandwidths
- Be configured to always have m/n of the circuits created with the default 
  method to steadily extend the graph model
- Collect data and record mean round trip latencies (of n measurings on each 
  circuit) for a specific path selection configuration to a file
- Record statistics about circuit creation to a file: average setup duration +
  min/max/median, number of failures + single extend-times, etc.
- Be configured via a config-file
- Save a network-model to, and load it from a binary file. Check routers for
  existence when loading

TODO:

- Implement PathRestrictions: OceanPhobic/OceanPhilic, EchelonPhobic for 
  changing destinations (query the country of a destination on set_target()
  and add the respective CountryRestriction to exit_rstr before building circ
- Therefore learn how controllers can do DNS requests over Tor
- Validate given configurations (e.g. entry_country:DE, exit_country:US, 
  max_crossings:0)
- Add port-history learning to StreamHandler or CircuitHandler and/or 
  port-preconfiguring: configure what ports will be needed
- Add control port authentication
- Add a bandwidth-test, to let OP-Addon test every circuits bandwidth for
  evaluating the performance of paths created with different methods
- Modify OP-Addon to not measure latencies to the first hop, to make 
  one-hop.diff obsolete, still useful?
- What is a beneficial network-model and how long does it take to learn one?
- Modify op-addon.py to make it connect to hidden services?
- Degree of anonymity
- Remove or improve bw-informer.py
- Find a better name than 'OP-Addon'
